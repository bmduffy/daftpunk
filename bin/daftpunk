#! /usr/bin/env python2.7
from sys import argv
from argparse import ArgumentParser, RawTextHelpFormatter
import subprocess

class DaftMeta(type):
    def __new__(mcls, name, bases, cdict):
        handlers = {}

        ignored = set(['__module__', '__metaclass__', '__doc__'])
        for key, value in cdict.items():
            if key not in ignored:
                if hasattr(value, '__daftpunk__'):
                    handlers[key] = value

        cdict['COMMANDS'] = handlers
        cdict['run'] = handle_command

        return super(DaftMeta, mcls).__new__(mcls, name, bases, cdict)

def handle_command(self):
    if self.config.command in self.COMMANDS:
        self.COMMANDS[self.config.command](self, *self.config.args)

def daftcommand(func):
    setattr(func, '__daftpunk__', None)
    return func

class Daftpunk(object):
    __metaclass__ = DaftMeta
    DESCRIPTION = 'Property Analytics Tool'
    EPILOG = 'Author: Nic Roland\nEmail: nicroland9@gmail.com\nTwitter: @nicr9_'

    def __init__(self, args):
        self.config = self.parse_args(args)

    def parse_args(self, argv):
        """For parsing CLI arguements."""
        parser = ArgumentParser(
                formatter_class=RawTextHelpFormatter,
                description=self.DESCRIPTION,
                epilog=self.EPILOG
                )

        parser.add_argument(
                'command',
                default=None,
                nargs='?',
                type=str,
                help='For a list of commands, see docs.'
                )

        parser.add_argument(
                'args',
                default=[],
                nargs='*',
                type=str,
                help='Any arguments the command needs.'
                )

        return parser.parse_args(argv[1:])

    @daftcommand
    def build(self, service=None):
        cmd = ["docker-compose", "build"]
        if service:
            cmd.append(service)
        subprocess.call(cmd)

    @daftcommand
    def up(self, service=None):
        cmd = ["docker-compose", "up", "-d"]
        if service:
            cmd.append(service)
        subprocess.call(cmd)

    @daftcommand
    def start_worker(self):
        subprocess.call(["docker", "exec", "-d", "daftpunk_worker_1", "dp_worker"])

    @daftcommand
    def go(self):
        self.build()
        self.up()
        subprocess.call(
                ["docker", "exec", "-it", "daftpunk_queue_1", "while ! nc -z localhost 5672; do sleep 0.5; done"]
                )
        self.start_worker()

    @daftcommand
    def search(self):
        subprocess.call(["docker", "exec", "daftpunk_worker_1", "dp_searcher"])

    @daftcommand
    def redis(self):
        subprocess.call(["docker", "exec", "-it", "daftpunk_db_1", "redis-cli"])

    @daftcommand
    def kill(self):
        subprocess.call(["docker-compose", "kill"])

    @daftcommand
    def rm(self):
        subprocess.call(["docker-compose", "rm", "-f"])

    @daftcommand
    def clean(self):
        self.kill()
        self.rm()

if __name__ == "__main__":
    dp = Daftpunk(argv)
    dp.run()
